<div class="container" ng-controller="mainCtrl">
    <h2>
        <a href="/angular"><i class="icon-arrow-left-3 fg-darker"></i></a>
        AngularJSサンプル<small class="on-right">osser.jp</small>
    </h2>
    <hr/>
    <h3>Form-Inputエリメント</h3>
    <table class="table hovered ">
        <thead>
            <tr>
                <th>No.</th>
                <th class="text-left">Type</th>
                <th class="text-left">説明</th>
            </tr>
        </thead>
        <tbody>
            <tr ng-repeat="item in input_elements">
                <td>{{$index+1}}</td>
                <td class="text-left" nowrap>{{item.name}}</td>
                <td class="text-left">
                    <p ng-bind-html="item.desc"></p>
                </td>
            </tr>
        </tbody>
        <tfoot></tfoot>
    </table>
    <h3>Form検証変数</h3>
    <table class="table hovered ">
        <thead>
            <tr>
                <th>No.</th>
                <th class="text-left">Type</th>
                <th class="text-left">説明</th>
            </tr>
        </thead>
        <tbody>
            <tr ng-repeat="item in formvalidation_variables">
                <td>{{$index+1}}</td>
                <td class="text-left" nowrap>{{item.name}}</td>
                <td class="text-left">
                    <p ng-bind-html="item.desc"></p>
                </td>
            </tr>
        </tbody>
        <tfoot></tfoot>
    </table>
    <h3>AngularJS検証クラス</h3>
    <table class="table hovered ">
        <thead>
            <tr>
                <th>No.</th>
                <th class="text-left">Type</th>
                <th class="text-left">説明</th>
            </tr>
        </thead>
        <tbody>
            <tr ng-repeat="item in angularjs_validation_classes">
                <td>{{$index+1}}</td>
                <td class="text-left" nowrap>{{item.name}}</td>
                <td class="text-left">
                    <p ng-bind-html="item.desc"></p>
                </td>
            </tr>
        </tbody>
        <tfoot></tfoot>
    </table>
    <h3>input検証プロパティ</h3>
    <table class="table hovered ">
        <thead>
            <tr>
                <th>No.</th>
                <th class="text-left">Type</th>
                <th class="text-left">説明</th>
            </tr>
        </thead>
        <tbody>
            <tr ng-repeat="item in input_attributes">
                <td>{{$index+1}}</td>
                <td class="text-left" nowrap>{{item.name}}</td>
                <td class="text-left">
                    <p ng-bind-html="item.desc"></p>
                </td>
            </tr>
        </tbody>
        <tfoot></tfoot>
    </table>
    <h3>checkboxプロパティ</h3>
    <table class="table hovered ">
        <thead>
            <tr>
                <th>No.</th>
                <th class="text-left">Type</th>
                <th class="text-left">説明</th>
            </tr>
        </thead>
        <tbody>
            <tr ng-repeat="item in checkbox_attributes">
                <td>{{$index+1}}</td>
                <td class="text-left" nowrap>{{item.name}}</td>
                <td class="text-left">
                    <p ng-bind-html="item.desc"></p>
                </td>
            </tr>
        </tbody>
        <tfoot></tfoot>
    </table>
</div>
<script>
    var myApp = angular.module('exampleApp', ['ngSanitize']);
    myApp.controller('mainCtrl', function ($scope) {
        $scope.input_elements = [
            {
                name: 'checkbox',
                desc: 'HTMLのcheckbox要素です。'
            },
            {
                name: 'email',
                desc: 'メールアドレス検証付きのテキスト入力要素です。正しいメールアドレスで無ければ、メールアドレス検証エラーのキーが設定されます。'
            },
            {
                name: 'number',
                desc: '数値検証と変換付きのテキスト入力要素です。数値で無ければ、数値検証エラーのキーが設定されます。'
            },
            {
                name: 'radio',
                desc: 'HTMLのradioボタンです。'
            },
            {
                name: 'text',
                desc: 'Angularのデータバインディングがされた標準のHTMLテキストinputです。'
            },
            {
                name: 'url',
                desc: 'URL検証付きのテキストinputです。正しいURLでなければ、URL検証エラーのキーが設定ｓあれます。'
            }
        ];
        $scope.formvalidation_variables = [
            {
                name: '$pristine',
                desc: 'ユーザーがまだフォームに手を加えていなければtrueになります。'
            },
            {
                name: '$dirty',
                desc: 'ユーザーが既にフォームに手を加えていればtrueになります。'
            },
            {
                name: '$valid',
                desc: 'フォームとそれに含まれる全ての入力要素が正当であれば、trueになります。'
            },
            {
                name: '$invalid',
                desc: 'フォームとそれに含まれる全ての入力要素に1つでも不正なものがあれば、trueになります。'
            },
            {
                name: '$error',
                desc: '<p>オブジェクトハッシュになっており、全ての不正な入力要素またはフォームへの参照を含みます。</p><p>キー:required、url、emailのような、検証トークン(エラー名)です。</p><p>値:エラーとなっている不正なフォームまたは入力要素の配列です。</p>'
            }
        ];
        $scope.angularjs_validation_classes = [
            {
                name: 'ng-pristine,ng-dirty',
                desc: 'Angularの入力ディレクティブは、ユーザーが何も触れていない新しい入力ウィジットの要素に対し、ng-pristineクラスを適用します。 ユーザーが入力ウィジットに触れると、クラスはng-dirtyに変更されます。'
            },
            {
                name: 'ng-valid,ng-invalid',
                desc: 'Angularは入力ウィジットの要素に、入力が有効か否かで、 これらのクラスのどちらかを適用します。'
            },
            {
                name: 'ng-scope',
                desc: 'Angularは新しいスコープが定義された要素に、このクラスを適用します。'
            },
            {
                name: 'ng-binding',
                desc: 'Angularは、例えばng-bindまたは二重中括弧({{}})によってデータバインディングが割り当てられた要素に、このクラスを割り当てます。'
            }
        ];
        $scope.input_attributes = [
            {
                name: 'ng-model',
                desc: 'ngModelは、Angularに相互のデータバインディングを行うように伝えるディレクティブです。 これは、input、select、textarea、また、NgModelControllerを使用し、 このディレクティブによって公開されたフォームのカスタム入力要素でも動作します。'
            },
            {
                name: 'ng-change',
                desc: '<p>ユーザーが入力値を変更した際に、与えられた式が評価されます。 モデルからの値の変更の際には、式は評価されません。</p><p>このディレクティブは、ngModelの提供が必要なことに注意してください。</p>'
            },
            {
                name: 'ng-minlength',
                desc: 'minlengthより値が短い場合、minlength検証エラーのキーを設定します。'
            },
            {
                name: 'ng-maxlength',
                desc: 'maxlengthより値が長い場合、maxlength検証エラーのキーを設定します。'
            },
            {
                name: 'ng-pattern',
                desc: 'RegExpパターン式に値が一致しない場合、pattern検証エラーのキーがー設定されます。 /正規表現/のインラインのパターンか、スコープ式として定義された正規表現のパターンを指定します。'
            },
            {
                name: 'ng-required',
                desc: 'ngRequired式がtrueと評価された際に、required属性を追加して要素に対して、必須であることを強制します。 データ紐付けにrequired属性をしたい場合に、reqired属性の代わりにngRequiredを使用します。'
            }
        ];
        $scope.checkbox_attributes = [
            {
                name: 'ng-model',
                desc: 'データ紐付けのための、Angular式を割り当てます。'
            },
            {
                name: 'ng-change',
                desc: 'ユーザーの操作によってinput要素の入力内容が変更された際に、ここで指定したAngular式が実行されます。'
            },
            {
                name: 'ng-true-value',
                desc: '選択された際に設定される値を式で指定します。'
            },
            {
                name: 'ng-false-value',
                desc: '選択されていない際に設定される値を式で指定します。'
            }
        ];
    });
</script>
